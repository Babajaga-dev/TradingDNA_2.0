n from typing import Optional
import logging
import pandas as pd

from cli.utils import print_error
from utils.logger_base import get_component_logger
from core.dna import DNA
from cli.handlers.dna_base import DNAHandler, load_market_data
from cli.handlers.dna_visualization import DNAVisualizationHandler
from cli.handlers.dna_config import DNAConfigHandler

logger = get_component_logger('DNAHandler')

class DNAMainHandler:
    """Main handler class for DNA System operations."""
    
    def __init__(self):
        """Initialize the DNA main handler."""
        self.base_handler = DNAHandler()
        self.dna = self.base_handler.dna
        self.visualization_handler = DNAVisualizationHandler(self.dna)
        self.config_handler = DNAConfigHandler(self.dna)
    
    def handle_init(self) -> None:
        """Handle DNA initialization."""
        self.base_handler.handle_init()
    
    def handle_gene(self, gene_type: str) -> None:
        """Handle gene analysis."""
        self.base_handler.handle_gene(gene_type)
    
    def handle_optimization(self) -> None:
        """Handle DNA optimization."""
        self.base_handler.handle_optimization()
    
    def handle_validation(self) -> None:
        """Handle DNA validation."""
        self.base_handler.handle_validation()
    
    def handle_composition(self) -> None:
        """Handle DNA composition."""
        self.base_handler.handle_composition()
    
    def handle_pattern_analysis(self) -> None:
        """Handle pattern analysis."""
        try:
            data = load_market_data()
            self.visualization_handler.handle_pattern_analysis(data)
        except Exception as e:
            logger.error(f"Errore durante analisi pattern: {str(e)}")
            print_error(f"Errore: {str(e)}")
            raise
    
    def handle_indicators(self) -> None:
        """Handle technical indicators visualization."""
        try:
            data = load_market_data()
            self.visualization_handler.handle_indicators(data)
        except Exception as e:
            logger.error(f"Errore durante analisi indicatori: {str(e)}")
            print_error(f"Errore: {str(e)}")
            raise
    
    def handle_scoring(self) -> None:
        """Handle DNA scoring visualization."""
        try:
            data = load_market_data()
            self.visualization_handler.handle_scoring(data)
        except Exception as e:
            logger.error(f"Errore durante calcolo score: {str(e)}")
            print_error(f"Errore: {str(e)}")
            raise
    
    def handle_backtest(self) -> None:
        """Handle DNA backtest."""
        try:
            data = load_market_data()
            self.visualization_handler.handle_backtest(data)
        except Exception as e:
            logger.error(f"Errore durante backtest: {str(e)}")
            print_error(f"Errore: {str(e)}")
            raise
            
    def handle_config(self) -> None:
        """Handle DNA configuration."""
        self.config_handler.handle_config()
